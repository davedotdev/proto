// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_tasks/proto_tasks.proto

/*
Package proto_tasks is a generated protocol buffer package.

It is generated from these files:
	proto_tasks/proto_tasks.proto

It has these top-level messages:
	Task
*/
package proto_tasks

import (
	context "context"
	time "time"

	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"

	gorm1 "github.com/jinzhu/gorm"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"

	ptypes1 "github.com/golang/protobuf/ptypes"

	fmt "fmt"

	math "math"

	_ "github.com/golang/protobuf/ptypes/timestamp"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type TaskORM struct {
	EntryName   string
	JSONKV      string
	Logs        string
	ServiceName string
	Status      string
	TaskStart   *time.Time
	TaskStop    *time.Time
	UUID        string
}

// TableName overrides the default tablename generated by GORM
func (TaskORM) TableName() string {
	return "tasks"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Task) ToORM(ctx context.Context) (TaskORM, error) {
	to := TaskORM{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ServiceName = m.ServiceName
	to.UUID = m.UUID
	if m.TaskStart != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.TaskStart); err != nil {
			return to, err
		}
		to.TaskStart = &t
	}
	if m.TaskStop != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.TaskStop); err != nil {
			return to, err
		}
		to.TaskStop = &t
	}
	to.EntryName = m.EntryName
	to.Status = Status_name[int32(m.Status)]
	to.Logs = m.Logs
	to.JSONKV = m.JSONKV
	if posthook, ok := interface{}(m).(TaskWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TaskORM) ToPB(ctx context.Context) (Task, error) {
	to := Task{}
	var err error
	if prehook, ok := interface{}(m).(TaskWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ServiceName = m.ServiceName
	to.UUID = m.UUID
	if m.TaskStart != nil {
		if to.TaskStart, err = ptypes1.TimestampProto(*m.TaskStart); err != nil {
			return to, err
		}
	}
	if m.TaskStop != nil {
		if to.TaskStop, err = ptypes1.TimestampProto(*m.TaskStop); err != nil {
			return to, err
		}
	}
	to.EntryName = m.EntryName
	to.Status = Status(Status_value[m.Status])
	to.Logs = m.Logs
	to.JSONKV = m.JSONKV
	if posthook, ok := interface{}(m).(TaskWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Task the arg will be the target, the caller the one being converted from

// TaskBeforeToORM called before default ToORM code
type TaskWithBeforeToORM interface {
	BeforeToORM(context.Context, *TaskORM) error
}

// TaskAfterToORM called after default ToORM code
type TaskWithAfterToORM interface {
	AfterToORM(context.Context, *TaskORM) error
}

// TaskBeforeToPB called before default ToPB code
type TaskWithBeforeToPB interface {
	BeforeToPB(context.Context, *Task) error
}

// TaskAfterToPB called after default ToPB code
type TaskWithAfterToPB interface {
	AfterToPB(context.Context, *Task) error
}

// DefaultCreateTask executes a basic gorm create call
func DefaultCreateTask(ctx context.Context, in *Task, db *gorm1.DB) (*Task, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TaskORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TaskORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskTask patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTask(ctx context.Context, patchee *Task, patcher *Task, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Task, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"ServiceName" {
			patchee.ServiceName = patcher.ServiceName
			continue
		}
		if f == prefix+"UUID" {
			patchee.UUID = patcher.UUID
			continue
		}
		if f == prefix+"TaskStart" {
			patchee.TaskStart = patcher.TaskStart
			continue
		}
		if f == prefix+"TaskStop" {
			patchee.TaskStop = patcher.TaskStop
			continue
		}
		if f == prefix+"EntryName" {
			patchee.EntryName = patcher.EntryName
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Logs" {
			patchee.Logs = patcher.Logs
			continue
		}
		if f == prefix+"JSONKV" {
			patchee.JSONKV = patcher.JSONKV
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTask executes a gorm list call
func DefaultListTask(ctx context.Context, db *gorm1.DB) ([]*Task, error) {
	in := Task{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &TaskORM{}, &Task{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []TaskORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TaskORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Task{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TaskORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TaskORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TaskORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]TaskORM) error
}
