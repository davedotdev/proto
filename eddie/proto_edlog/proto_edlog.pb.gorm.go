// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto_edlog/proto_edlog.proto

/*
Package proto_edlog is a generated protocol buffer package.

It is generated from these files:
	proto_edlog/proto_edlog.proto

It has these top-level messages:
	EdLog
*/
package proto_edlog

import (
	context "context"

	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	"github.com/jinzhu/gorm"
	gorm1 "github.com/jinzhu/gorm"

	fmt "fmt"

	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type EdLogORM struct {
	gorm.Model
	Function    string
	Host        string
	Information string
	Level       string
	PID         int64
	PPID        int64
	ServiceName string
}

// TableName overrides the default tablename generated by GORM
func (EdLogORM) TableName() string {
	return "ed_logs"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *EdLog) ToORM(ctx context.Context) (EdLogORM, error) {
	to := EdLogORM{}
	var err error
	if prehook, ok := interface{}(m).(EdLogWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ServiceName = m.ServiceName
	to.Host = m.Host
	to.PID = m.PID
	to.PPID = m.PPID
	to.Level = m.Level
	to.Function = m.Function
	to.Information = m.Information
	if posthook, ok := interface{}(m).(EdLogWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EdLogORM) ToPB(ctx context.Context) (EdLog, error) {
	to := EdLog{}
	var err error
	if prehook, ok := interface{}(m).(EdLogWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ServiceName = m.ServiceName
	to.Host = m.Host
	to.PID = m.PID
	to.PPID = m.PPID
	to.Level = m.Level
	to.Function = m.Function
	to.Information = m.Information
	if posthook, ok := interface{}(m).(EdLogWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type EdLog the arg will be the target, the caller the one being converted from

// EdLogBeforeToORM called before default ToORM code
type EdLogWithBeforeToORM interface {
	BeforeToORM(context.Context, *EdLogORM) error
}

// EdLogAfterToORM called after default ToORM code
type EdLogWithAfterToORM interface {
	AfterToORM(context.Context, *EdLogORM) error
}

// EdLogBeforeToPB called before default ToPB code
type EdLogWithBeforeToPB interface {
	BeforeToPB(context.Context, *EdLog) error
}

// EdLogAfterToPB called after default ToPB code
type EdLogWithAfterToPB interface {
	AfterToPB(context.Context, *EdLog) error
}

// DefaultCreateEdLog executes a basic gorm create call
func DefaultCreateEdLog(ctx context.Context, in *EdLog, db *gorm1.DB) (*EdLog, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EdLogORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EdLogORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type EdLogORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type EdLogORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskEdLog patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskEdLog(ctx context.Context, patchee *EdLog, patcher *EdLog, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*EdLog, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"ServiceName" {
			patchee.ServiceName = patcher.ServiceName
			continue
		}
		if f == prefix+"Host" {
			patchee.Host = patcher.Host
			continue
		}
		if f == prefix+"PID" {
			patchee.PID = patcher.PID
			continue
		}
		if f == prefix+"PPID" {
			patchee.PPID = patcher.PPID
			continue
		}
		if f == prefix+"Level" {
			patchee.Level = patcher.Level
			continue
		}
		if f == prefix+"Function" {
			patchee.Function = patcher.Function
			continue
		}
		if f == prefix+"Information" {
			patchee.Information = patcher.Information
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListEdLog executes a gorm list call
func DefaultListEdLog(ctx context.Context, db *gorm1.DB) ([]*EdLog, error) {
	in := EdLog{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EdLogORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &EdLogORM{}, &EdLog{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EdLogORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []EdLogORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EdLogORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*EdLog{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type EdLogORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type EdLogORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type EdLogORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]EdLogORM) error
}
